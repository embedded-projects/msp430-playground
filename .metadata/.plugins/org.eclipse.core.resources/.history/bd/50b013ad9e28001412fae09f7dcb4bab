/*
 * ADC10 Testing
 * Measure voltage into an
 */

#include <msp430.h> 
#include "uart.h"
unsigned int ADC_value = 0;

// function prototype
void ConfigureADC(void);

void uart_rx_isr(unsigned char c) {
	uart_putc(c);
	P1OUT ^= BIT0;		// toggle P1.0 (red led)
}

void main(void) {
    WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;
	
	BCSCTL2 &= ~(DIVS_3);		// SMCLK = DCO = 1MHZ
	P1SEL |= BIT3;				// ADCinput pin P1.3
	ConfigureADC();

	P1DIR  =ar BIT0 + BIT6; 		// P1.0 and P1.6 are the red+green LEDs
	P1OUT  = BIT0 + BIT6; 		// All LEDs off

    uart_init();

	// register ISR called when data was received
    uart_set_rx_isr_ptr(uart_rx_isr);

    __bis_SR_register(GIE);
	__enable_interrupt();			// Enable interrupts

	while(1){
		__delay_cycles(1000);		// Wait for ADC Ref to settle
		ADC10CTL0 |= ENC + ADC10SC;	// Sampling and conversion starts
		__bis_SR_register(CPUOFF + GIE);	// Low power mode 0 with interrupts enable
		ADC_value = ADC10MEM;		// Assigns the value held in ADC10MEM
		uart_putc((ADC_value >> 8 ) & 0xFF);
		uart_putc(ADC_value & 0xFF);
	}
}


// ADC10 interrupt service routine
#pragma vector = ADC10_VECTOR
__interrupt void ADC10_ISR(void){
	__bic_SR_register_on_exit(CPUOFF);	// Return to activate mode
}

// Function containing ADC set-up
void ConfigureADC(void){
	ADC10CTL1 = INCH_3 + ADC10DIV_3;	// Channel 3, ADC10CLK/3
	ADC10CTL1 &= ~ADC10DF; // Binary format
	ADC10CTL0 = SREF_0 + ADC10SHT_3 + ADC10ON + ADC10IE;	// Vcc & Vss as reference, Sample and hold for 64 Clock cycles, ADC on, ADC interrupt enable
	ADC10AE0 |= BIT3;				// ADC input enable P1.3
}
