#include <msp430g2553.h>

#define UART_TXD 0x02;		// TXD on P1.1 (Timer0_A.OUT0)
#define UART_RXD 0x04;		// RXD on P1.2 (Timer0_A.CCI1A)

#define UART_TBIT_DIV_2 	(1000000 / (9600 * 2))		// Conditions for 9600 Baud SW UART, SMCLK = 1 MHz
#define UART_TBIT			(1000000 / 9600)

unsigned int txData;			// UART internal variable for TX
unsigned char rxBuffer;			// Received UART character

void TimerA_UART_tx(unsigned char byte);
void TimerA_UART_print(char *string);

void main(void) {
    WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
    DCOCTL = 0x00;				// Set DCOCLK to 1MHz
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT = 0x00; 				// Initialize all GPIOs

    P1SEL = UART_TXD + UART_RXD;	// Timer function for TXD/RXD pins
    P1DIR = 0xFF & ~UART_RXD;		// Set all pins but RXD to output

    // Configure Timer_A for full-duplex UART operation
    TA0CCTL0 = OUT;			// Set TXD Idle as Mark = '1'
    TA0CCTL1 = SCS + CM1 + CAP + CCIE;   // Sync, Neg Edge, Capture, Int
    TA0CTL = TASSEL_2 + MC_2;			// SMCLK, start in continuous mode

    _BIS_SR(GIE);

    TimerA_UART_print("G2553 Timer A UART \n");
    TimerA_UART_print("READY.\n");
    while(1){				// waiting for incoming character
    	//_BIS_SR(LPM0_bits); // Enter low power mode
    	//TimerA_UART_tx(rxBuffer);		// Transmit the received data
    	TimerA_UART_tx(0x23);

    }
}

void TimerA_UART_tx(unsigned char byte){		// Output one byte using the Timer_A UART
	while(TACCTL0 & CCIE);			// Ensure last char got TX'd
	P1OUT ^= BIT0;					// a LED to signal ...
	TA0CCR0 = TAR;					// Current state of TA counter
	TA0CCR0 += UART_TBIT;			// One bit time till first bit
	TA0CCTL0 = OUTMOD0 + CCIE;		// Set TXD on EQU0, Int
	txData = byte;					// Load global variable
	txData |= 0x100;				// Add mark stop bit to TXData
	txData <<= 1;					// Add space start bit
}

void TimerA_UART_print(char *string){
	while(*string){
		TimerA_UART_tx(*string ++);
	}
}

#pragma vector=TIMER0_A0_VECTOR			// Timer_A UART - Transmit Interrupt Handler
__interrupt void Timer_A0_ISR(void){
	static unsigned char txBitCnt = 10;



	TA0CCR0 += UART_TBIT;				// Add offset to CCRx
	if(txBitCnt == 0){					// All bits TXed?
		TA0CCTL0 &= ~ CCIE;				// All bits TXed, disable interrupt
		txBitCnt = 10;					// Re-load bit counter
	}
	else{
		if(txData & 0x01)
			TA0CCTL0 &= ~ OUTMOD2;		// TX Mark '1'
		else
			TA0CCTL0 |= OUTMOD2;		// TX Space '0'
	}
	txData >>= 1;						// Shift right 1 bit
	txBitCnt--;

}

#pragma vector=TIMER0_A1_VECTOR			// Timer_A UART - Receive interrupt Handler
__interrupt void Timer_A1_ISR(void){
	static unsigned char rxBitCnt = 8;
	static unsigned char rxData = 0;

	P1OUT ^= BIT0;

	switch(__even_in_range(TA0IV, TA0IV_TAIFG)){		// Use calculated branching
	case TA0IV_TACCR1:					// TACCR1 CCIFG - UART RX
		TA0CCR1 += UART_TBIT;			// Add offset to CCRx
		if(TA0CCTL1 & CAP){				// Capture mode = start bit edge
			TA0CCTL1 &= ~ CAP;			// Switch capture to compare mode
			TA0CCR1 += UART_TBIT_DIV_2;	// Point CCRx to middle of D0

		} else{
			rxData >>= 1;
			if(TA0CCTL1 & SCCI)			// Get bit waiting in receive latch
				rxData |= 0x80;
			rxBitCnt--;
			if(rxBitCnt == 0){
				rxBuffer = rxData;
				rxBitCnt = 8;
				TA0CCTL1 |= CAP;		// Switch compare to capture mode
				_BIC_SR(LPM0_EXIT);		// wake up from low power mode.
			}
		}
	
	}
}
