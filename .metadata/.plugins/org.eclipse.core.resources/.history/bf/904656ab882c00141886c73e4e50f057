#include <msp430g2553.h>

#include "uart.h"
unsigned int ADC_value = 0;

// function prototype
void ConfigureADC(void);

void uart_rx_isr(unsigned char c) {
	uart_putc(c);
	P1OUT ^= BIT0;		// toggle P1.0 (red led)
}

unsigned char counter;				// Current location in wave array
unsigned char wave[32] = {			// Wave array, preset to values of sine
	128, 140, 152, 164, 173, 181, 187, 191,
	192, 191, 187, 181, 173, 164, 152, 140,
	128, 116, 104, 92, 83, 75, 69, 65,
	64, 65, 69, 75, 83, 92, 104, 116 };

unsigned int i;						// Used for 'for' loops.

int main(void) {
    WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
    P1OUT = 0;
	P1DIR |= BIT6;
	P1SEL |= BIT6;
	counter = 0;								// Reset counter

	BCSCTL2 &= ~(DIVS_3);		// SMCLK = DCO = 1MHZ
	P1SEL |= BIT3;				// ADCinput pin P1.3
	ConfigureADC();

	// Initialize Timer
	CCTL0 = CCIE;								// CCR0 interrupt enabled
	CCTL1 = CCIE;								// CCR1 interrupt enabled
	CCR0 = 256;									// Set PWM period to 256 clock ticks
	CCR1 = wave[counter];						// Set first duty cycle value
    TA0CCTL1 = OUTMOD_7;						// TA0CCR1 reset/set -- high voltage below count and low voltage when past
	TACTL = TASSEL_2 + MC_1 + TAIE + TACLR;		// SMCLK, upmode, enable interrupt, clear TA1R

	_BIS_SR(LPM0_bits + GIE);					// Enter LPM0 w/ interrupt
}

/**
 * TimerA0 interrupt service routine
 **/
#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMERA0_ISR(void)
{
	//P1OUT |= BIT0;
	
	CCR1 = wave[counter];		// Set next duty cycle value
	counter += 1;				// Add Offset to CCR0
	if ( counter == 32)			// If counter is at the end of the array
	{
		counter = 0;			// Reset counter
	}
}

/**
 * TimerA1 Interrupt Vector (TAIV) handler
 **/
#pragma vector=TIMER0_A1_VECTOR
__interrupt void TIMERA1_ISR(void)
{
	switch( TAIV )
	{
		case  2:				// CCR1 interrupt
			//P1OUT &= ~BIT0;
			break;
		default:
			break;
	}
}
